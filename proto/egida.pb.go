// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.1
// source: egida.proto

package grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ListService) Reset() {
	*x = ListService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListService) ProtoMessage() {}

func (x *ListService) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListService.ProtoReflect.Descriptor instead.
func (*ListService) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{1}
}

func (x *ListService) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type ServiceNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ServiceNameReq) Reset() {
	*x = ServiceNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNameReq) ProtoMessage() {}

func (x *ServiceNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNameReq.ProtoReflect.Descriptor instead.
func (*ServiceNameReq) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListServicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListServicesReq) Reset() {
	*x = ListServicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesReq) ProtoMessage() {}

func (x *ListServicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesReq.ProtoReflect.Descriptor instead.
func (*ListServicesReq) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{3}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{4}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages []*Package `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
}

func (x *ListPackage) Reset() {
	*x = ListPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackage) ProtoMessage() {}

func (x *ListPackage) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPackage.ProtoReflect.Descriptor instead.
func (*ListPackage) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{5}
}

func (x *ListPackage) GetPackages() []*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

type ListPackagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPackagesReq) Reset() {
	*x = ListPackagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPackagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackagesReq) ProtoMessage() {}

func (x *ListPackagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPackagesReq.ProtoReflect.Descriptor instead.
func (*ListPackagesReq) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{6}
}

type LynisScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score string `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	Log   string `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *LynisScore) Reset() {
	*x = LynisScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LynisScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LynisScore) ProtoMessage() {}

func (x *LynisScore) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LynisScore.ProtoReflect.Descriptor instead.
func (*LynisScore) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{7}
}

func (x *LynisScore) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *LynisScore) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type ScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScoreReq) Reset() {
	*x = ScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egida_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreReq) ProtoMessage() {}

func (x *ScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_egida_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreReq.ProtoReflect.Descriptor instead.
func (*ScoreReq) Descriptor() ([]byte, []int) {
	return file_egida_proto_rawDescGZIP(), []int{8}
}

var File_egida_proto protoreflect.FileDescriptor

var file_egida_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x67, 0x69, 0x64, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67,
	0x72, 0x70, 0x63, 0x22, 0x35, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x1d, 0x0a,
	0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x34, 0x0a, 0x0a, 0x4c, 0x79, 0x6e,
	0x69, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22,
	0x0a, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x32, 0x84, 0x02, 0x0a, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x15,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x00, 0x32, 0x49, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0x46, 0x0a,
	0x0f, 0x48, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x79, 0x6e, 0x69, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x79, 0x6e, 0x69, 0x73, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_egida_proto_rawDescOnce sync.Once
	file_egida_proto_rawDescData = file_egida_proto_rawDesc
)

func file_egida_proto_rawDescGZIP() []byte {
	file_egida_proto_rawDescOnce.Do(func() {
		file_egida_proto_rawDescData = protoimpl.X.CompressGZIP(file_egida_proto_rawDescData)
	})
	return file_egida_proto_rawDescData
}

var file_egida_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_egida_proto_goTypes = []interface{}{
	(*Service)(nil),         // 0: grpc.Service
	(*ListService)(nil),     // 1: grpc.ListService
	(*ServiceNameReq)(nil),  // 2: grpc.ServiceNameReq
	(*ListServicesReq)(nil), // 3: grpc.ListServicesReq
	(*Package)(nil),         // 4: grpc.Package
	(*ListPackage)(nil),     // 5: grpc.ListPackage
	(*ListPackagesReq)(nil), // 6: grpc.ListPackagesReq
	(*LynisScore)(nil),      // 7: grpc.LynisScore
	(*ScoreReq)(nil),        // 8: grpc.ScoreReq
}
var file_egida_proto_depIdxs = []int32{
	0, // 0: grpc.ListService.services:type_name -> grpc.Service
	4, // 1: grpc.ListPackage.packages:type_name -> grpc.Package
	3, // 2: grpc.Services.ListAllServices:input_type -> grpc.ListServicesReq
	3, // 3: grpc.Services.ListRunningServices:input_type -> grpc.ListServicesReq
	3, // 4: grpc.Services.ListStoppedServices:input_type -> grpc.ListServicesReq
	2, // 5: grpc.Services.GetService:input_type -> grpc.ServiceNameReq
	6, // 6: grpc.Packages.ListAllPackages:input_type -> grpc.ListPackagesReq
	8, // 7: grpc.HardeningScores.GetLynisScore:input_type -> grpc.ScoreReq
	1, // 8: grpc.Services.ListAllServices:output_type -> grpc.ListService
	1, // 9: grpc.Services.ListRunningServices:output_type -> grpc.ListService
	1, // 10: grpc.Services.ListStoppedServices:output_type -> grpc.ListService
	0, // 11: grpc.Services.GetService:output_type -> grpc.Service
	5, // 12: grpc.Packages.ListAllPackages:output_type -> grpc.ListPackage
	7, // 13: grpc.HardeningScores.GetLynisScore:output_type -> grpc.LynisScore
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_egida_proto_init() }
func file_egida_proto_init() {
	if File_egida_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_egida_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPackagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LynisScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egida_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_egida_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_egida_proto_goTypes,
		DependencyIndexes: file_egida_proto_depIdxs,
		MessageInfos:      file_egida_proto_msgTypes,
	}.Build()
	File_egida_proto = out.File
	file_egida_proto_rawDesc = nil
	file_egida_proto_goTypes = nil
	file_egida_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServicesClient interface {
	ListAllServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListService, error)
	ListRunningServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListService, error)
	ListStoppedServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListService, error)
	GetService(ctx context.Context, in *ServiceNameReq, opts ...grpc.CallOption) (*Service, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) ListAllServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListService, error) {
	out := new(ListService)
	err := c.cc.Invoke(ctx, "/grpc.Services/ListAllServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ListRunningServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListService, error) {
	out := new(ListService)
	err := c.cc.Invoke(ctx, "/grpc.Services/ListRunningServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ListStoppedServices(ctx context.Context, in *ListServicesReq, opts ...grpc.CallOption) (*ListService, error) {
	out := new(ListService)
	err := c.cc.Invoke(ctx, "/grpc.Services/ListStoppedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) GetService(ctx context.Context, in *ServiceNameReq, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/grpc.Services/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
type ServicesServer interface {
	ListAllServices(context.Context, *ListServicesReq) (*ListService, error)
	ListRunningServices(context.Context, *ListServicesReq) (*ListService, error)
	ListStoppedServices(context.Context, *ListServicesReq) (*ListService, error)
	GetService(context.Context, *ServiceNameReq) (*Service, error)
}

// UnimplementedServicesServer can be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (*UnimplementedServicesServer) ListAllServices(context.Context, *ListServicesReq) (*ListService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllServices not implemented")
}
func (*UnimplementedServicesServer) ListRunningServices(context.Context, *ListServicesReq) (*ListService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunningServices not implemented")
}
func (*UnimplementedServicesServer) ListStoppedServices(context.Context, *ListServicesReq) (*ListService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoppedServices not implemented")
}
func (*UnimplementedServicesServer) GetService(context.Context, *ServiceNameReq) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}

func RegisterServicesServer(s *grpc.Server, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_ListAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ListAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Services/ListAllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ListAllServices(ctx, req.(*ListServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ListRunningServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ListRunningServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Services/ListRunningServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ListRunningServices(ctx, req.(*ListServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ListStoppedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ListStoppedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Services/ListStoppedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ListStoppedServices(ctx, req.(*ListServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Services/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).GetService(ctx, req.(*ServiceNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllServices",
			Handler:    _Services_ListAllServices_Handler,
		},
		{
			MethodName: "ListRunningServices",
			Handler:    _Services_ListRunningServices_Handler,
		},
		{
			MethodName: "ListStoppedServices",
			Handler:    _Services_ListStoppedServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Services_GetService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egida.proto",
}

// PackagesClient is the client API for Packages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PackagesClient interface {
	ListAllPackages(ctx context.Context, in *ListPackagesReq, opts ...grpc.CallOption) (*ListPackage, error)
}

type packagesClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesClient(cc grpc.ClientConnInterface) PackagesClient {
	return &packagesClient{cc}
}

func (c *packagesClient) ListAllPackages(ctx context.Context, in *ListPackagesReq, opts ...grpc.CallOption) (*ListPackage, error) {
	out := new(ListPackage)
	err := c.cc.Invoke(ctx, "/grpc.Packages/ListAllPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackagesServer is the server API for Packages service.
type PackagesServer interface {
	ListAllPackages(context.Context, *ListPackagesReq) (*ListPackage, error)
}

// UnimplementedPackagesServer can be embedded to have forward compatible implementations.
type UnimplementedPackagesServer struct {
}

func (*UnimplementedPackagesServer) ListAllPackages(context.Context, *ListPackagesReq) (*ListPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllPackages not implemented")
}

func RegisterPackagesServer(s *grpc.Server, srv PackagesServer) {
	s.RegisterService(&_Packages_serviceDesc, srv)
}

func _Packages_ListAllPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).ListAllPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Packages/ListAllPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).ListAllPackages(ctx, req.(*ListPackagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Packages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Packages",
	HandlerType: (*PackagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllPackages",
			Handler:    _Packages_ListAllPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egida.proto",
}

// HardeningScoresClient is the client API for HardeningScores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HardeningScoresClient interface {
	GetLynisScore(ctx context.Context, in *ScoreReq, opts ...grpc.CallOption) (*LynisScore, error)
}

type hardeningScoresClient struct {
	cc grpc.ClientConnInterface
}

func NewHardeningScoresClient(cc grpc.ClientConnInterface) HardeningScoresClient {
	return &hardeningScoresClient{cc}
}

func (c *hardeningScoresClient) GetLynisScore(ctx context.Context, in *ScoreReq, opts ...grpc.CallOption) (*LynisScore, error) {
	out := new(LynisScore)
	err := c.cc.Invoke(ctx, "/grpc.HardeningScores/GetLynisScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardeningScoresServer is the server API for HardeningScores service.
type HardeningScoresServer interface {
	GetLynisScore(context.Context, *ScoreReq) (*LynisScore, error)
}

// UnimplementedHardeningScoresServer can be embedded to have forward compatible implementations.
type UnimplementedHardeningScoresServer struct {
}

func (*UnimplementedHardeningScoresServer) GetLynisScore(context.Context, *ScoreReq) (*LynisScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLynisScore not implemented")
}

func RegisterHardeningScoresServer(s *grpc.Server, srv HardeningScoresServer) {
	s.RegisterService(&_HardeningScores_serviceDesc, srv)
}

func _HardeningScores_GetLynisScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardeningScoresServer).GetLynisScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HardeningScores/GetLynisScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardeningScoresServer).GetLynisScore(ctx, req.(*ScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HardeningScores_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.HardeningScores",
	HandlerType: (*HardeningScoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLynisScore",
			Handler:    _HardeningScores_GetLynisScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egida.proto",
}
